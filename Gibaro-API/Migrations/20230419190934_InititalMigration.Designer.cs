// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Context;

#nullable disable

namespace Gibaro_API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230419190934_InititalMigration")]
    partial class InititalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasMaxLength(30)
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notification_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e3e0349-f334-4260-bc8a-96a80ea58bb2"),
                            IsRead = false,
                            Message = "You have a new message.",
                            SenderId = new Guid("6e2cc9fa-e5b7-4b19-99bb-591aa2a33c09"),
                            Timestamp = new DateTime(2023, 2, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Messages",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("bb58bfa5-7119-4512-a33e-d8f7aa7fe2c4"),
                            IsRead = false,
                            Message = "You have a new friend request.",
                            SenderId = new Guid("0b726657-e034-467b-af14-09090b097af6"),
                            Timestamp = new DateTime(2023, 2, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "FriendRequest",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("a20b5caa-21ab-454a-9808-d418a8feda97"),
                            IsRead = false,
                            Message = "You were mentioned in a post.",
                            SenderId = new Guid("bd122f8d-004a-4391-bf01-c620a9bc8f70"),
                            Timestamp = new DateTime(2023, 2, 18, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Mention",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("033fa656-cef5-468f-a36b-2dca896eabf3"),
                            IsRead = false,
                            Message = "Likes your post",
                            SenderId = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            Timestamp = new DateTime(2023, 2, 18, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Favorite",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("7456d18e-8ce5-4882-b0ff-3d928a52a3bf"),
                            IsRead = false,
                            Message = "Shared your post",
                            SenderId = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            Timestamp = new DateTime(2023, 2, 20, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Shared",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("2ecf3634-262e-4a62-a309-50f1462dbe08"),
                            IsRead = false,
                            Message = "Likes your post",
                            SenderId = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            Timestamp = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Favorite",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("6e17b80a-b267-45d9-913c-1a8561382b22"),
                            IsRead = false,
                            Message = "Likes your post",
                            SenderId = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            Timestamp = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Favorite",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("52de628e-0562-43e3-a084-089766e5a357"),
                            IsRead = false,
                            Message = "Likes your post",
                            SenderId = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            Timestamp = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Favorite",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        });
                });

            modelBuilder.Entity("Entities.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<bool>("BirthDateLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HeaderUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFullyRegistered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProffesional")
                        .HasColumnType("bit");

                    b.Property<string>("LeavingAppReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Notification")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a0475b0-8474-4637-b1f0-6814329a37f9"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://www.incimages.com/uploaded_files/image/1920x1080/getty_481292845_77896.jpg",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e2a3ada8-5f97-419c-b90e-ae05acc29c97",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nelson@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Nelson",
                            NormalizedEmail = "NELSON@GMAIL.COM",
                            NormalizedUserName = "NELSON",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAag7JjXUhYWH/OFXPi4v1XPdrX2cFHNcHCAEigYylpqUOEQHIcI57q+ilkvyU+L8w==",
                            PhoneNumber = "7871111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "nelson"
                        },
                        new
                        {
                            Id = new Guid("6e2cc9fa-e5b7-4b19-99bb-591aa2a33c09"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://cdn.hswstatic.com/gif/play/0b7f4e9b-f59c-4024-9f06-b3dc12850ab7-1920-1080.jpg",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "12693c27-b5fe-47d0-89ff-d08521edeb08",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexis@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Alexis",
                            NormalizedEmail = "ALEXIS@GMAIL.COM",
                            NormalizedUserName = "ALEXIS",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGUkrPsFaxUDFIU1Pw8p5rHY6f47nBIMIppjR4vCyHeQ/72m33kGBTSruy12sej5kg==",
                            PhoneNumber = "7872222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "alexis"
                        },
                        new
                        {
                            Id = new Guid("0b726657-e034-467b-af14-09090b097af6"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://cdn2.psychologytoday.com/assets/styles/manual_crop_1_91_1_1528x800/public/field_blog_entry_images/2018-09/shutterstock_648907024.jpg?itok=7lrLYx-B",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "29f00cd2-e8eb-4c54-8458-55ca73424f7e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "David",
                            NormalizedEmail = "DAVID@GMAIL.COM",
                            NormalizedUserName = "DAVID",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIDA5eiTMWosnLgOv3iG54H7IPhVDjTYMkWsAmWeFt1vAnVn2fjRbSrwx1xXaf5K/Q==",
                            PhoneNumber = "7873333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "david"
                        },
                        new
                        {
                            Id = new Guid("ca6324b7-d5f7-4276-bb8c-40df9eee6898"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://globalnews.ca/wp-content/uploads/2017/05/oldestmanthumb.jpg?quality=85&strip=all",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "496f0a29-857b-4cb1-aadf-57be6add9796",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pedro@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Pedro",
                            NormalizedEmail = "PEDRO@GMAIL.COM",
                            NormalizedUserName = "PEDRO",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELW8+BSOWFr1xbTaIfZqTZz/3LtCq89nuatjaxKdUuzJgwUy+5bpBogK68yQ7z0kLQ==",
                            PhoneNumber = "7875555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "pedro"
                        },
                        new
                        {
                            Id = new Guid("bd122f8d-004a-4391-bf01-c620a9bc8f70"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://caricom.org/wp-content/uploads/Floyd-Morris-Remake-1024x879-1.jpg",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c605f80f-89d9-4470-bf61-6abc03f8c8d0",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juan@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Juan",
                            NormalizedEmail = "JUAN@GMAIL.COM",
                            NormalizedUserName = "JUAN",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEE7iIzDGRvgzmgg45O48+5Z98MKs3J6smxrvaoJak2XPC5ZJ0ObdRSEbJYsex0uHRg==",
                            PhoneNumber = "7876666666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "juan"
                        },
                        new
                        {
                            Id = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://www.happierhuman.com/wp-content/uploads/2022/07/glass-half-full-type-persons-lessons-learned.jpg",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4758d4bd-b083-465d-9ddd-13e61f05e4b8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = "cus_NW5y3MHFNsTpXu",
                            Email = "nathan@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Nathan",
                            NormalizedEmail = "NATHAN@GMAIL.COM",
                            NormalizedUserName = "NATHAN",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIX5wEEGad1NTQttO2DEtwkYMxWYrtICa9oki94ZlRbCbwqdwvJfORwkfCQMVzZjxg==",
                            PhoneNumber = "7877777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "nathan"
                        },
                        new
                        {
                            Id = new Guid("0904be49-2b83-4767-b71b-d5d4dc8341d5"),
                            AccessFailedCount = 0,
                            AvatarUrl = "https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500",
                            BirthDateLocked = false,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2393a202-7f6b-4852-af61-63fc8a5f7425",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jorge@gmail.com",
                            EmailConfirmed = true,
                            IsFullyRegistered = false,
                            IsProffesional = false,
                            LockoutEnabled = false,
                            Name = "Jorge",
                            NormalizedEmail = "JORGE@GMAIL.COM",
                            NormalizedUserName = "JORGE",
                            Notification = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENTenQb8BbnhrAJ0Pu5UcEoDhsQ+XdQdtjAQnWrZNYeqCL4N90ORO1LTA5oQ9Rd3/A==",
                            PhoneNumber = "7878888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "872be4ae-8530-40f2-9bfe-c409bd07896e",
                            TwoFactorEnabled = false,
                            UserName = "jorge"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d7d1bc4-4c7b-4f40-9ad1-1d16f7c6b162"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = "SOMEID",
                            LastUsedAt = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Model = "SOMEMODEL",
                            Platform = "IOS",
                            RefreshToken = "RefreshToken1",
                            Revoked = true,
                            UserAgent = "UserAgent1",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        },
                        new
                        {
                            Id = new Guid("2a3e3f6d-9fdd-4b07-9cb9-6a0a1d7c9363"),
                            CreatedAt = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = "SOMEID2",
                            LastUsedAt = new DateTime(2023, 2, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Model = "SOMEMODEL",
                            Platform = "Android",
                            RefreshToken = "RefreshToken2",
                            Revoked = true,
                            UserAgent = "UserAgent2",
                            UserId = new Guid("52d93506-877e-4ae7-8969-1c227aa4f96c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserDevice", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
